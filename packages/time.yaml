time:
  - platform: sntp
    id: sntptime
    timezone: 'Europe/Rome'
    on_time_sync:
      - lambda: |-
          id(screensaver_time) = id(sntptime).now().timestamp;
    on_time:
      - seconds: /10
        #minutes: /1
        # note minutes: /1, not minutes: 1, the latter only does the first minute of each hour rather than every minute
        then:
        #- switch.toggle: switch_lights
        - lambda: |-
            if (id(sntptime).now().is_valid())
            {
              std::time_t currentTime = id(sntptime).now().timestamp;
              std::tm *currentTime_local = localtime(&currentTime);
              int currentHour = currentTime_local->tm_hour;
              int currentMinute = currentTime_local->tm_min;
              int currentMinutesInDay = currentHour*60 + currentMinute;
              int currentDayOfWeek = currentTime_local->tm_wday;

              int currentSlot = 0;
              int current_slot_value = 0;
              for (int i = 0; i < 3; i++)
              {
                  if ((currentMinutesInDay >= (id(lights_timer_slot_hour)[i]*60 + id(lights_timer_slot_minute)[i])) &&
                      (currentMinutesInDay < (id(lights_timer_slot_hour)[i + 1]*60 + id(lights_timer_slot_minute)[i + 1])))
                  {
                    currentSlot = i + 1;

                    if (abs(id(light_percentage) - (1 - id(light_sensor_percentage))) > 10)
                    {
                      if (id(light_percentage) < (1 - id(light_sensor_percentage)))
                      {
                        id(light_percentage) += 10;
                      }
                      else
                      {
                        id(light_percentage) -= 10;
                      }                      
                    }
                    else
                    {
                      id(light_percentage) = (1 - id(light_sensor_percentage));
                    }

                    current_slot_value = id(lights_timer_slot_value_min)[currentSlot] + ((id(lights_timer_slot_value_max)[currentSlot] - id(lights_timer_slot_value_min)[currentSlot]) * id(light_percentage));
                    
                    ESP_LOGD("timer", "light_percentage %f, light_sensor_percentage %f, current_slot_value %f", id(light_percentage), id(light_sensor_percentage), current_slot_value);

                    //if (true == id(switch_lights_home).state)
                    //{
                    // current_slot_value = id(lights_timer_slot_value_home)[currentSlot];
                    //}
                    //else
                    //{
                    //  current_slot_value = id(lights_timer_slot_value_away)[currentSlot];
                    //}

                    break;
                  }
              }

              if (true == id(switch_lights_auto).state)
              {
                if ((current_slot_value > 0) &&
                    (0 == id(lights).current_values.is_on()))
                {
                  id(lights).turn_on().perform();
                  ESP_LOGD("timer", "Turning lights on");
                }

                float brightness = (float)current_slot_value/100;

                if ((brightness != id(lights).remote_values.get_brightness()) &&
                    (1 == id(lights).current_values.is_on()))
                {
                  auto lightsCall = id(lights).make_call();
                  lightsCall.set_brightness(brightness);
                  //lightsCall.set_white(brightness);
                  lightsCall.perform();

                  ESP_LOGD("timer", "Is on %d, set brightness %f, previous white value %f", id(lights).current_values.is_on(), brightness, id(lights).remote_values.get_brightness());
                  //id(lights).current_values_as_brightness(&brightness);
                  //id(lights).publish_state();
                }

                if ((current_slot_value == 0) &&
                    (1 == id(lights).current_values.is_on()))
                {
                  id(lights).turn_off().perform();
                  ESP_LOGD("timer", "Turning lights off");
                }
              }
              else
              {
                ESP_LOGD("timer", "Manual mode %d", id(switch_lights_auto).state);
              }

              ESP_LOGD("timer", "Current time: %d:%d value %d", currentHour, currentMinute, current_slot_value);
              //ESP_LOGD("timer", "Slot 0 %d:%d h %d a %d, Slot 1 %d:%d h %d a %d, Slot 2 %d:%d h %d a %d, Slot 3 %d:%d h %d a %d", 
              //id(lights_timer_slot_hour)[3], id(lights_timer_slot_minute)[3], id(lights_timer_slot_value_min)[0], id(lights_timer_slot_value_max)[0],
              //id(lights_timer_slot_hour)[0], id(lights_timer_slot_minute)[0], id(lights_timer_slot_value_min)[1], id(lights_timer_slot_value_max)[1],
              //id(lights_timer_slot_hour)[1], id(lights_timer_slot_minute)[1], id(lights_timer_slot_value_min)[2], id(lights_timer_slot_value_max)[2],
              //id(lights_timer_slot_hour)[2], id(lights_timer_slot_minute)[2], id(lights_timer_slot_value_min)[3], id(lights_timer_slot_value_max)[3]);

              for (int day = 0; day < 31; day++)
              {
                for (int slot = 0; slot < 2; slot++)
                {
                  if ((currentTime > id(fishfeeder_timer_check)[day][slot][0]) &&
                      (0 == id(fishfeeder_timer_check)[day][slot][1]))
                  {
                    auto call = id(feeder_slider).make_call();
                    call.number_increment(false);
                    call.perform();

                    id(fishfeeder_timer_check)[day][slot][1] = 1;

                    std::tm *triggered_slot = localtime(&id(fishfeeder_timer_check)[day][slot][0]);
                    ESP_LOGD("timer", "Feed time %d/%d %d:%d", triggered_slot->tm_mday, (triggered_slot->tm_mon + 1), triggered_slot->tm_hour, triggered_slot->tm_min);
                  }
                }
              }



              /*if (id(fish_feeder_no_food).index_of(id(fish_feeder_no_food).state) != currentDayOfWeek)
              {
                // Feeder timer loop
                for (int i = 0; i < 2; i++)
                {
                  if ((id(fishfeeder_timer_check)[0] != currentDayOfWeek) &&
                      (id(fishfeeder_timer_check)[1] != i) &&
                      (currentMinutesInDay > (id(fishfeeder_timer_slot_hour)[i]*60 + id(fishfeeder_timer_slot_minute)[i])))
                  {
                    ESP_LOGD("timer", "Feed time %d:%d", currentHour, currentMinute);
                    id(fish_feeder_trigger).press();
                    id(fishfeeder_timer_check)[0] = currentDayOfWeek;
                    id(fishfeeder_timer_check)[1] = i;
                  }
                }
              }*/
            }
