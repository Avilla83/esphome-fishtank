esphome:
  name: fishtank
  on_boot:
    then:
      - stepper.report_position:
          id: fish_feeder_stepper
          position: !lambda 'return id(fishfeeder_last_position);'

esp32:
  board: esp-wrover-kit
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
#api:
#  password: "19081908"

ota:
  password: "19081908"

captive_portal:

web_server:
  port: 80

dallas:
  - pin: GPIO2

# Individual sensors
sensor:
  - platform: dallas
    address: 0x1601145d49c91e28
    name: "Temperatura Acqua"
    id: temp_sensor

  - platform: adc
    pin: GPIO34
    name: "Sensore di luce"
    id: light_sensor
    device_class: illuminance
    unit_of_measurement: lx
    accuracy_decimals: 6
    update_interval: 5s
    filters:
      - lambda: |-
          float lux = (x / 10000.0) * 2000000.0;

          if(id(light_sensor_counter) >= 10)
          {
            id(light_sensor_counter) = 0;
          }
          id(light_sensor_counter)++;

          id(light_sensor_buffer)[id(light_sensor_counter)] = lux;
          
          float average_lux = 0;

          for (int i = 0; i < 10; i++)
          {
            average_lux += id(light_sensor_buffer)[i];
          }
          //average_lux -= *std::max_element(id(light_sensor_buffer), id(light_sensor_buffer) + 10);
          //average_lux -= *std::min_element(id(light_sensor_buffer), id(light_sensor_buffer) + 10);

          average_lux = average_lux / 10;

          if (average_lux < id(sensor_light_min).state) {
            id(light_sensor_percentage) = 0;
          } else if (average_lux > id(sensor_light_max).state) {
            id(light_sensor_percentage) =  1;
          } else if (id(sensor_light_max).state > average_lux){
            id(light_sensor_percentage) = (average_lux - id(sensor_light_min).state) / (id(sensor_light_max).state - id(sensor_light_min).state);
            //ESP_LOGD("timer", "light_sensor_percentage %f, sensor_light_min %f, sensor_light_max %f", id(light_sensor_percentage), id(sensor_light_min).state, id(sensor_light_max).state);
          }

          return average_lux;

  #- platform: template
  #  name: "Percentuale di luce esterna"
  #  id: light_sensor_percentage
  #  update_interval: 10s
  #  lambda: |-
  #    if (id(light_sensor).state < id(sensor_light_min).state) {
  #      return 0;
  #    } else if (id(light_sensor).state > id(sensor_light_max).state) {
  #      return 1;
  #    } else if (id(sensor_light_max).state > id(sensor_light_min).state){
  #      return (id(light_sensor).state - id(sensor_light_min).state) / (id(sensor_light_max).state - id(sensor_light_min).state);
  #    }


light:
  - platform: monochromatic
    name: "Luci Dimmer"
    id: lights
    output: ledc_pwm
    on_turn_on:
      - switch.turn_on: switch_lights
    on_turn_off:
      - switch.turn_off: switch_lights

  #- platform: monochromatic
  #  output: gpio_4_backlight_pwm
  #  name: "Display Backlight"
  #  id: back_light
  #  restore_mode: ALWAYS_ON

stepper:
  - platform: uln2003
    id: fish_feeder_stepper
    pin_a: GPIO26
    pin_b: GPIO25
    pin_c: GPIO33
    pin_d: GPIO32
    max_speed: 200 steps/s
    sleep_when_done: True

output:
  - platform: ledc
    id: ledc_pwm
    pin: GPIO27
    frequency: 5000 Hz
    max_power: 100%

  #- platform: ledc
  #  pin: GPIO4
  #  id: gpio_4_backlight_pwm

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

#font:
#  - file:
#      type: gfonts
#      family: Roboto
#      weight: bold
#    id: roboto_16
#    size: 18

color:
  - id: color_icon
    red: 100%
    green: 100%
    blue: 100%
    white: 100%

  - id: color_text
    red: 100%
    green: 100%
    blue: 100%
    white: 100%

#animation:
#  - file: "images/tiny.gif"
#    id: img_screensaver
#    resize: 80x80
#    type: rgb565

#interval:
#  - interval: 500ms
#    then:
#    - lambda: |-
#        if (id(screensaver_time) != 0)
#        {
#          std::time_t now = id(sntptime).now().timestamp;
#          double time_diff = std::difftime(now, id(screensaver_time));
#          
#          // Check if it is time to activate the screensaver
#          if (time_diff > $screensaver_trigger_time)
#          {
#            id(screensaver_time) = 0;
#            id(my_display).show_page(id(screensaverPage));
#          }
#        }

  #- interval: 1s
  #  then:
  #    animation.next_frame: img_screensaver
            
packages:
  substitutions: !include packages/substitutions.yaml
  globals: !include packages/globals.yaml
  wifi: !include packages/wifi.yaml
  number: !include packages/number.yaml
  time: !include packages/time.yaml
  switch: !include packages/switch.yaml
  button: !include packages/buttons.yaml
  select: !include packages/select.yaml
  #display: !include packages/display.yaml
  #image: !include packages/image.yaml
  #touchscreen: !include packages/touchscreen.yaml
  #binary_sensor: !include packages/binary_sensor.yaml